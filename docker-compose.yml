version: "3.5"

services:
  memcached:
    container_name: "${COMPOSE_PROJECT_NAME}_memcached"
    build:
      context: ./containers/memcached
      dockerfile: Dockerfile-alpine
    command: ["memcached", "-m", "64m"]
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - memcached-net
    restart: "no"

  redis:
    container_name: "${COMPOSE_PROJECT_NAME}_redis"
    build:
      context: ./containers/redis
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
    #  - ./sessions:/data:Z
    #  - ./containers/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data:Z
    #command: ["CMD", "redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - redis-net
    #logging:
    #  driver: none
    restart: "no"

  postgres:
    container_name: "${COMPOSE_PROJECT_NAME}_postgres"
    build:
      context: ./containers/postgres
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    environment:
      - PGDATA=/var/lib/postgresql/data
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    ports:
      - 5432:5432
    volumes:
      - ./backup:/var/lib/postgresql/backup
      - postgres_data:/var/lib/postgresql/data:Z
    networks:
      - postgres-net
    restart: "no"

  zookeeper1:
    container_name: "${COMPOSE_PROJECT_NAME}_zookeeper1"
    build:
      context: ./containers/zookeeper
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888
      #ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zookeeper2:2888:3888 server.3=zookeeper3:2888:3888
    volumes:
    #  - ./containers/zookeeper/conf/zoo.cfg:/conf/zoo.cfg:ro
      - zookeeper1_data:/data:Z
      - zookeeper1_datalog:/datalog:Z
      - zookeeper1_logs:/logs:Z
    networks:
      - zookeeper-net
    restart: "no"
    hostname: zookeeper1
    #ports:
    #  - 2181:2181
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3

  #zookeeper2:
  #  container_name: "${COMPOSE_PROJECT_NAME}_zookeeper2"
  #  build:
  #    context: ./containers/zookeeper
  #    dockerfile: Dockerfile-alpine
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  environment:
  #    ZOO_MY_ID: 2
  #    ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zookeeper3:2888:3888
  #  volumes:
  #  #  - ./containers/zookeeper/conf/zoo.cfg:/conf/zoo.cfg:ro
  #    - zookeeper2_data:/data:Z
  #    - zookeeper2_datalog:/datalog:Z
  #    - zookeeper2_logs:/logs:Z
  #  networks:
  #    - zookeeper-net
  #  restart: "no"
  #  hostname: zookeeper2
  #  #ports:
  #  #  - 2182:2181
  #  healthcheck:
  #    test: ["CMD", "healthcheck.sh"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3

  #zookeeper3:
  #  container_name: "${COMPOSE_PROJECT_NAME}_zookeeper3"
  #  build:
  #    context: ./containers/zookeeper
  #    dockerfile: Dockerfile-alpine
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  environment:
  #    ZOO_MY_ID: 3
  #    ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=zookeeper2:2888:3888 server.3=0.0.0.0:2888:3888
  #  volumes:
  #  #  - ./containers/zookeeper/conf/zoo.cfg:/conf/zoo.cfg:ro
  #    - zookeeper3_data:/data:Z
  #    - zookeeper3_datalog:/datalog:Z
  #    - zookeeper3_logs:/logs:Z
  #  networks:
  #    - zookeeper-net
  #  restart: "no"
  #  hostname: zookeeper3
  #  #ports:
  #  #  - 2183:2181
  #  healthcheck:
  #    test: ["CMD", "healthcheck.sh"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3

  kafka:
    container_name: "${COMPOSE_PROJECT_NAME}_kafka"
    build:
      context: ./containers/kafka
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      #KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181/kafka,zookeeper2:2181/kafka,zookeeper3:2181/kafka
      KAFKA_BROKER_ID: 1
      #HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      #HOSTNAME_COMMAND: "ifconfig eth0 | grep 'inet addr' | awk '{ print $$2}' | awk -F: '{print $$2}''"
    hostname: kafka
    ports:
      - 9092:9092
    networks:
      - zookeeper-net
      - kafka-net
    volumes:
      - kafka_data:/kafka:Z
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: "no"
    depends_on:
      - zookeeper1
      #- zookeeper2
      #- zookeeper3

  php-fpm:
    container_name: "${COMPOSE_PROJECT_NAME}_php-fpm"
    build:
      context: ./containers/php-fpm
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    networks:
      - memcached-net
      - redis-net
      - postgres-net
      - kafka-net
      - web
    volumes:
      - ./app:/var/share:z
      - ./tmp/:/tmp/:z
      - ./var/tmp/:/var/tmp/:z
      - ./containers/php-fpm/conf/php.ini:/usr/local/etc/php/php.ini:ro
    depends_on:
      - memcached
      - redis
      - postgres
      #- kafka

  php-cli:
    container_name: "${COMPOSE_PROJECT_NAME}_php-cli"
    build:
      context: ./containers/php-cli
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    #environment:
    #  - XDEBUG_CONFIG: "idekey=PHPSTORM remote_host=${host_ip}"
    #  - PHP_IDE_CONFIG: serverName=${COMPOSE_PROJECT_NAME}
    user: www-data
    command: ["php", "-a"]
    entrypoint: ["entrypoint.sh"]
    volumes:
      - ./app:/var/share:z
      - ./tmp/:/tmp/:z
      - ./var/tmp/:/var/tmp/:z
      - ./containers/php-cli/conf/php.ini:/usr/local/etc/php/php.ini:ro
      - ./containers/php-cli/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
    networks:
      - memcached-net
      - postgres-net
      - kafka-net
    tty: true
    depends_on:
      - memcached
      - postgres
      #- kafka

  php-worker:
    container_name: "${COMPOSE_PROJECT_NAME}_php-worker"
    build:
      context: ./containers/php-worker
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    #user: www-data
    entrypoint: ["/usr/bin/supervisord", "-n", "-c",  "/etc/supervisord.conf"]
    volumes:
      - ./app:/var/share:z
      - ./tmp/:/tmp/:z
      - ./var/tmp/:/var/tmp/:z
      - ./containers/php-worker/php.ini:/usr/local/etc/php/php.ini:ro
      - ./containers/php-worker/supervisord.conf:/etc/supervisord.conf:ro
      - ./containers/php-worker/conf:/etc/supervisor.d:ro
    networks:
      - memcached-net
      - postgres-net
      - kafka-net
    depends_on:
      - memcached
      - postgres
      #- kafka

  nginx:
    container_name: "${COMPOSE_PROJECT_NAME}_nginx"
    build:
      context: ./containers/nginx
      dockerfile: Dockerfile-alpine
      args:
        - host_group_id
        - host_user_id
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - NGINX_PORT=${NGINX_PORT}
      - APP_ENV=${APP_ENV}
      - APP_SECRET=${APP_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - ENV_VAR_LIST=$$NGINX_HOST $$NGINX_PORT $$APP_ENV $$APP_SECRET $$DATABASE_URL
    command: ["nginx", "-g", "daemon off;"]
    entrypoint: ["entrypoint.sh"]
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    ports:
      - 80:80
    volumes:
      - ./app:/var/share:z
      - ./var/log/nginx:/var/log/nginx
      - ./containers/nginx/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
      - ./containers/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./containers/nginx/conf/app.conf:/etc/nginx/conf.d/app.conf.tmpl:ro
      - ./containers/nginx/conf/healthcheck.conf:/etc/nginx/conf.d/healthcheck.conf:ro
    networks:
      - web
    restart: "no"
    depends_on:
      - php-fpm

  #pgadmin:
  #  container_name: "${COMPOSE_PROJECT_NAME}_pgadmin"
  #  build:
  #    context: ./containers/pgadmin
  #    dockerfile: Dockerfile-alpine
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  ports:
  #    - 5050:5050
  #  volumes:
  #    - ./pgadmin:/pgadmin:Z
  #  networks:
  #    - web
  #  restart: "no"

networks:
  memcached-net:
    driver: bridge
  redis-net:
    driver: bridge
  postgres-net:
    driver: bridge
  zookeeper-net:
    driver: bridge
  kafka-net:
    driver: bridge
  web:
    driver: bridge

volumes:
  redis_data:
    name: "${COMPOSE_PROJECT_NAME}_redis_data"
  postgres_data:
    name: "${COMPOSE_PROJECT_NAME}_postgres_data"
  zookeeper1_data:
    name: "${COMPOSE_PROJECT_NAME}_zookeeper1_data"
  zookeeper1_datalog:
    name: "${COMPOSE_PROJECT_NAME}_zookeeper1_datalog"
  zookeeper1_logs:
    name: "${COMPOSE_PROJECT_NAME}_zookeeper1_logs"
  #zookeeper2_data:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper2_data"
  #zookeeper2_datalog:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper2_datalog"
  #zookeeper2_logs:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper2_logs"
  #zookeeper3_data:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper3_data"
  #zookeeper3_datalog:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper3_datalog"
  #zookeeper3_logs:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper3_logs"
  kafka_data:
    name: "${COMPOSE_PROJECT_NAME}_kafka_data"