version: "3.5"

services:
  memcached:
    container_name: "${COMPOSE_PROJECT_NAME}_memcached"
    build:
      context: ./containers/memcached
      dockerfile: Dockerfile
    command: ["memcached", "-m", "256m"]
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - memcached-net
    restart: "no"

  redis:
    container_name: "${COMPOSE_PROJECT_NAME}_redis"
    build:
      context: ./containers/redis
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
    #  - ./containers/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data:Z
    #command: ["CMD", "redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - redis-net
    #logging:
    #  driver: none
    restart: "no"

  elasticsearch:
    container_name: "${COMPOSE_PROJECT_NAME}_elasticsearch"
    build:
      context: ./containers/elasticsearch
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data:Z
    networks:
      - elasticsearch-net

  kibana:
    container_name: "${COMPOSE_PROJECT_NAME}_kibana"
    build:
      context: ./containers/kibana
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    #environment:
    #  SERVER_HOST: localhost
    #  SERVER_NAME: kibana
    #  ELASTICSEARCH_URL: elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - elasticsearch-net
    restart: "no"
    depends_on:
      - elasticsearch

  postgres:
    container_name: "${COMPOSE_PROJECT_NAME}_postgres"
    build:
      context: ./containers/postgres
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    environment:
      - PGDATA=/var/lib/postgresql/data
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    ports:
      - 5432:5432
    volumes:
      - ./backup:/var/lib/postgresql/backup:z
      - postgres_data:/var/lib/postgresql/data:Z
    networks:
      - postgres-net
    restart: "no"

  #pgadmin:
  #  container_name: "${COMPOSE_PROJECT_NAME}_pgadmin"
  #  build:
  #    context: ./containers/pgadmin
  #    dockerfile: Dockerfile
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  ports:
  #    - 5050:5050
  #  volumes:
  #    - ./pgadmin:/pgadmin:Z
  #  networks:
  #    - web
  #  restart: "no"

  #zookeeper1:
  #  container_name: "${COMPOSE_PROJECT_NAME}_zookeeper1"
  #  build:
  #    context: ./containers/zookeeper
  #    dockerfile: Dockerfile
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  environment:
  #    ZOO_MY_ID: 1
  #    ZOO_SERVERS: server.1=0.0.0.0:2888:3888
  #    #ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zookeeper2:2888:3888 server.3=zookeeper3:2888:3888
  #  volumes:
  #  #  - ./containers/zookeeper/zoo.cfg:/conf/zoo.cfg:ro
  #    - zookeeper1_data:/data:Z
  #    - zookeeper1_datalog:/datalog:Z
  #    - zookeeper1_logs:/logs:Z
  #  networks:
  #    - zookeeper-net
  #  restart: "no"
  #  hostname: zookeeper1
  #  #ports:
  #  #  - 2181:2181
  #  healthcheck:
  #    test: ["CMD", "healthcheck.sh"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3

  #zookeeper2:
  #  container_name: "${COMPOSE_PROJECT_NAME}_zookeeper2"
  #  build:
  #    context: ./containers/zookeeper
  #    dockerfile: Dockerfile
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  environment:
  #    ZOO_MY_ID: 2
  #    ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zookeeper3:2888:3888
  #  volumes:
  #  #  - ./containers/zookeeper/zoo.cfg:/conf/zoo.cfg:ro
  #    - zookeeper2_data:/data:Z
  #    - zookeeper2_datalog:/datalog:Z
  #    - zookeeper2_logs:/logs:Z
  #  networks:
  #    - zookeeper-net
  #  restart: "no"
  #  hostname: zookeeper2
  #  #ports:
  #  #  - 2182:2181
  #  healthcheck:
  #    test: ["CMD", "healthcheck.sh"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3

  #zookeeper3:
  #  container_name: "${COMPOSE_PROJECT_NAME}_zookeeper3"
  #  build:
  #    context: ./containers/zookeeper
  #    dockerfile: Dockerfile
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  environment:
  #    ZOO_MY_ID: 3
  #    ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=zookeeper2:2888:3888 server.3=0.0.0.0:2888:3888
  #  volumes:
  #  #  - ./containers/zookeeper/zoo.cfg:/conf/zoo.cfg:ro
  #    - zookeeper3_data:/data:Z
  #    - zookeeper3_datalog:/datalog:Z
  #    - zookeeper3_logs:/logs:Z
  #  networks:
  #    - zookeeper-net
  #  restart: "no"
  #  hostname: zookeeper3
  #  #ports:
  #  #  - 2183:2181
  #  healthcheck:
  #    test: ["CMD", "healthcheck.sh"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3

  #kafka:
  #  container_name: "${COMPOSE_PROJECT_NAME}_kafka"
  #  build:
  #    context: ./containers/kafka
  #    dockerfile: Dockerfile
  #    args:
  #      - host_group_id
  #      - host_user_id
  #  environment:
  #    KAFKA_ADVERTISED_HOST_NAME: kafka
  #    KAFKA_ADVERTISED_PORT: 9092
  #    KAFKA_PORT: 9092
  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
  #    #KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181/kafka,zookeeper2:2181/kafka,zookeeper3:2181/kafka
  #    KAFKA_BROKER_ID: 1
  #    #HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
  #    #HOSTNAME_COMMAND: "ifconfig eth0 | grep 'inet addr' | awk '{ print $$2}' | awk -F: '{print $$2}''"
  #  hostname: kafka
  #  ports:
  #    - 9092:9092
  #  networks:
  #    - zookeeper-net
  #    - kafka-net
  #  volumes:
  #    - kafka_data:/kafka:Z
  #    #- /var/run/docker.sock:/var/run/docker.sock
  #  healthcheck:
  #    test: ["CMD", "healthcheck.sh"]
  #    interval: 30s
  #    timeout: 5s
  #    retries: 3
  #  restart: "no"
  #  depends_on:
  #    - zookeeper1
  #    #- zookeeper2
  #    #- zookeeper3

  confluent-zookeeper:
    container_name: "${COMPOSE_PROJECT_NAME}_confluent-zookeeper"
    build:
      context: ./containers/confluent-zookeeper
      dockerfile: Dockerfile
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    hostname: confluent-zookeeper
    volumes:
      - confluent-zookeeper_data:/var/lib/zookeeper/data:Z
      - confluent-zookeeper_log:/var/lib/zookeeper/log:Z
      - confluent-zookeeper_secrets:/etc/zookeeper/secrets:Z
    networks:
      - confluent-zookeeper-net

  confluent-kafka:
    container_name: "${COMPOSE_PROJECT_NAME}_confluent-kafka"
    build:
      context: ./containers/confluent-kafka
      dockerfile: Dockerfile
    hostname: confluent-kafka
    #ports:
    #  - 9092:9092
    #  - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: confluent-zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://confluent-kafka:9092
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://confluent-kafka:9092,PLAINTEXT_HOST://localhost:29092
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      #KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      #CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: confluent-kafka:9092
      #CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: confluent-zookeeper:2181
      #CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      #CONFLUENT_METRICS_ENABLE: 'true'
      #CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
      - confluent-kafka_data:/var/lib/kafka/data:Z
      - confluent-kafka_secrets:/etc/kafka/secrets:Z
    networks:
      - confluent-zookeeper-net
    depends_on:
      - confluent-zookeeper

  confluent-schema:
    container_name: "${COMPOSE_PROJECT_NAME}_confluent-schema"
    build:
      context: ./containers/confluent-schema
      dockerfile: Dockerfile
    environment:
      SCHEMA_REGISTRY_HOST_NAME: confluent-schema
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: confluent-zookeeper:2181
    hostname: confluent-schema
    #ports:
    #  - 8081:8081
    volumes:
      - confluent-schema_secrets:/etc/schema-registry/secrets:Z
    networks:
      - confluent-zookeeper-net
    depends_on:
      - confluent-zookeeper
      - confluent-kafka

  confluent-rest:
    container_name: "${COMPOSE_PROJECT_NAME}_confluent-rest"
    build:
      context: ./containers/confluent-rest
      dockerfile: Dockerfile
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: confluent-zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://confluent-schema:8081
      KAFKA_REST_HOST_NAME: confluent-rest
      KAFKA_REST_BOOTSTRAP_SERVERS: confluent-kafka:9092
    hostname: confluent-rest
    #ports:
    #  - 8082:8082
    networks:
      - confluent-zookeeper-net
      - confluent-rest-net
    depends_on:
      - confluent-zookeeper
      - confluent-kafka
      - confluent-schema

  confluent-control:
    container_name: "${COMPOSE_PROJECT_NAME}_confluent-control"
    build:
      context: ./containers/confluent-control
      dockerfile: Dockerfile
    environment:
      CONTROL_CENTER_ZOOKEEPER_CONNECT: confluent-zookeeper:2181
      CONTROL_CENTER_BOOTSTRAP_SERVERS: confluent-kafka:9092
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 2
    #  CONTROL_CENTER_CONNECT_CLUSTER: confluent-connect:8083
    #  CONTROL_CENTER_KSQL_URL: confluent-ksql:8088
    #  CONTROL_CENTER_KSQL_ADVERTISED_URL: http://localhost:8088
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    hostname: confluent-control
    ports:
      - 9021:9021
    volumes:
      - /tmp/control-center/data:/var/lib/confluent-control-center:Z
    networks:
      - confluent-zookeeper-net
    ulimits:
      nofile:
        soft: 16384
        hard: 16384
    depends_on:
      - confluent-zookeeper
      - confluent-kafka
      - confluent-schema

  node-cli:
    container_name: "${COMPOSE_PROJECT_NAME}_node-cli"
    build:
      context: ./containers/node-cli
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    user: node
    volumes:
      - ./app:${SHARED_DIR}:z
    stdin_open: true
    tty: true

  php-cli:
    container_name: "${COMPOSE_PROJECT_NAME}_php-cli"
    build:
      context: ./containers/php-cli
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    environment:
      XDEBUG_CONFIG: "remote_host=${DOCKER_HOST_IP}"
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    user: www-data
    command: ["php", "-a"]
    entrypoint: ["entrypoint.sh"]
    volumes:
      - ./app:${SHARED_DIR}:z
      - ./tmp/:/tmp/:z
      - ./var/tmp/:/var/tmp/:z
      - ./containers/php-cli/php.ini:/usr/local/etc/php/php.ini:ro
      - ./containers/php-cli/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
    networks:
      - memcached-net
      - elasticsearch-net
      - postgres-net
#      - kafka-net
      - confluent-rest-net
    stdin_open: true
    tty: true
    depends_on:
      - memcached
      - elasticsearch
      - postgres
      #- kafka

  php-worker:
    container_name: "${COMPOSE_PROJECT_NAME}_php-worker"
    build:
      context: ./containers/php-worker
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    #user: www-data
    entrypoint: ["/usr/bin/supervisord", "-n", "-c",  "/etc/supervisord.conf"]
    volumes:
      - ./app:${SHARED_DIR}:z
      - ./tmp/:/tmp/:z
      - ./var/tmp/:/var/tmp/:z
      - ./containers/php-worker/php.ini:/usr/local/etc/php/php.ini:ro
      - ./containers/php-worker/supervisord.conf:/etc/supervisord.conf:ro
      - ./containers/php-worker/conf:/etc/supervisor.d:ro
    networks:
      - memcached-net
      - elasticsearch-net
      - postgres-net
#      - kafka-net
      - confluent-rest-net
    depends_on:
      - memcached
      - elasticsearch
      - postgres
      #- kafka

  php-fpm:
    container_name: "${COMPOSE_PROJECT_NAME}_php-fpm"
    build:
      context: ./containers/php-fpm
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    environment:
      #XDEBUG_CONFIG: "remote_host=${DOCKER_HOST_IP}"
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    networks:
      - memcached-net
      - redis-net
      - elasticsearch-net
      - postgres-net
#      - kafka-net
      - confluent-rest-net
      - web
    volumes:
      - ./app:${SHARED_DIR}:z
      - ./tmp/:/tmp/:z
      - ./var/tmp/:/var/tmp/:z
      - ./containers/php-fpm/php.ini:/usr/local/etc/php/php.ini:ro
    depends_on:
      - memcached
      - redis
      - elasticsearch
      - postgres
      #- kafka

  nginx:
    container_name: "${COMPOSE_PROJECT_NAME}_nginx"
    build:
      context: ./containers/nginx
      dockerfile: Dockerfile
      args:
        - host_group_id
        - host_user_id
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - NGINX_PORT=${NGINX_PORT}
      - APP_ENV=${APP_ENV}
      - APP_SECRET=${APP_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - SHARED_DIR=${SHARED_DIR}
      - ENV_VAR_LIST=$$NGINX_HOST $$NGINX_PORT $$APP_ENV $$APP_SECRET $$DATABASE_URL $$SHARED_DIR
    command: ["nginx", "-g", "daemon off;"]
    entrypoint: ["entrypoint.sh"]
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    ports:
      - 80:80
    volumes:
      - ./app:${SHARED_DIR}:z
      - ./log/nginx:/var/log/nginx:Z
      - ./containers/nginx/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
      - ./containers/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./containers/nginx/conf:/etc/nginx/tmpl:ro
    networks:
      - web
    restart: "no"
    depends_on:
      - php-fpm

networks:
  memcached-net:
    driver: bridge
  redis-net:
    driver: bridge
  elasticsearch-net:
    driver: bridge
  postgres-net:
    driver: bridge
  #zookeeper-net:
  #  driver: bridge
  #kafka-net:
  #  driver: bridge
  confluent-zookeeper-net:
    driver: bridge
  confluent-rest-net:
    driver: bridge
  web:
    driver: bridge

volumes:
  redis_data:
    name: "${COMPOSE_PROJECT_NAME}_redis_data"
  elasticsearch_data:
    name: "${COMPOSE_PROJECT_NAME}_elasticsearch_data"
  postgres_data:
    name: "${COMPOSE_PROJECT_NAME}_postgres_data"
  #zookeeper1_data:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper1_data"
  #zookeeper1_datalog:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper1_datalog"
  #zookeeper1_logs:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper1_logs"
  #zookeeper2_data:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper2_data"
  #zookeeper2_datalog:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper2_datalog"
  #zookeeper2_logs:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper2_logs"
  #zookeeper3_data:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper3_data"
  #zookeeper3_datalog:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper3_datalog"
  #zookeeper3_logs:
  #  name: "${COMPOSE_PROJECT_NAME}_zookeeper3_logs"
  #kafka_data:
  #  name: "${COMPOSE_PROJECT_NAME}_kafka_data"
  confluent-zookeeper_data:
    name: "${COMPOSE_PROJECT_NAME}_confluent-zookeeper_data"
  confluent-zookeeper_log:
    name: "${COMPOSE_PROJECT_NAME}_confluent-zookeeper_log"
  confluent-zookeeper_secrets:
    name: "${COMPOSE_PROJECT_NAME}_confluent-zookeeper_secrets"
  confluent-kafka_data:
    name: "${COMPOSE_PROJECT_NAME}_confluent-kafka_data"
  confluent-kafka_secrets:
    name: "${COMPOSE_PROJECT_NAME}_confluent-kafka_secrets"
  confluent-schema_secrets:
    name: "${COMPOSE_PROJECT_NAME}_confluent-schema_secrets"
